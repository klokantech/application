class Record < ApplicationRecord
  include RecordsQuery
  include AASM




  update_index('records#record') { self }
  update_index('collections#collection') { self.collections }
  has_many :collection_records, dependent: :destroy
  has_many :collections, through: :collection_records
  has_many :attachments, dependent: :destroy
  # update_index('attachments#attachment') { attachments }
  belongs_to :user
  update_index 'users#user' do
    previous_changes['user_id'] || user
  end
  has_one :primary_image, class_name: 'Attachments::Image', foreign_key: :id, primary_key: :primary_image_id
  has_many :record_taxonomy_terms, class_name: 'RecordTaxonomyTerm', dependent: :destroy
  has_many :taxonomy_terms, through: :record_taxonomy_terms
  belongs_to :credit_image, class_name: 'Attachments::Image', dependent: :destroy, optional: true

  accepts_nested_attributes_for :attachments, allow_destroy: true

  has_many :record_reports

  enum view_type: %i[gallery expanded]
  enum state: %i[draft published pending_review flagged deleted]
  serialize :location, Hash
  serialize :errors_on_publishing, Hash

  validates :title, :state, presence: true
  with_options if: -> (r) { r.state == 'published' } do
    validates :title, :description, :state, :lat, :lng, :date_from, presence: true
    validates :description, presence: true
    validates :lat, numericality: { greater_than_or_equal_to: -90, less_than_or_equal_to: 90 }
    validates :lng, numericality: { greater_than_or_equal_to: -180, less_than_or_equal_to: 180 }
    validates_format_of :date_from, with: /\d{4}-\d{2}-\d{2}/, message: "isn't in day / month / year format"
    validates_format_of :date_to, with: /\d{4}-\d{2}-\d{2}/, message: "isn't in day / month / year format", if: -> {date_to.present?}
    validate :date_is_in_the_past
  end

  validates :user, presence: true # , unless: ->(r) {r.orphan?}

  scope :orphan, -> {
    where(user: nil)
  }

  before_validation :autogenerate_title, on: :create
  before_validation :check_autogenerated_title, on: :update

  attr_accessor :checking_validity_for_publishing
  before_validation :check_valid_for_publishing, unless: -> {checking_validity_for_publishing}
  
  after_save do
    if primary_image.nil? && attachments.image.any?
      attachments.image.first.attachable.set_as_only_primary!
    end

  end

  # check whether the record is valid for publishing. If it's not, we record what needs to happen to make it so
  def check_valid_for_publishing
    Rails.logger.debug("checking valid for publishing")
    # Set a bool attr on the record so we can skip validation callbacks and avoid a loop
    self.checking_validity_for_publishing = true
    original_state = self.state
    self.state = 'published'
    validate
    error_attributes = {
      valid_for_publishing: errors.empty?,
      errors_on_publishing: errors.messages
    }
    persisted? ? self.update_columns(error_attributes) : self.assign_attributes(error_attributes)
    errors.clear
    
    self.state = original_state
    self.checking_validity_for_publishing = false
  end

  def autogenerate_title
    self.title = "My new record" unless title.present?
    self.has_autogenerated_title = true
  end

  def check_autogenerated_title
    self.has_autogenerated_title = false if title_changed?
  end

  def date_is_in_the_past
    errors.add(:date_from, 'date is not in the past') if date_from.present? && Date.today < date_from
  end

  aasm column: :state, enum: true do
    state :draft, initial: true
    state :published
    state :pending_review
    state :flagged
    state :deleted

    event :mark_as_draft do
      transitions from: %i[draft published pending_review flagged], to: :draft
    end

    event :mark_as_pending_review do
      transitions from: %i[draft flagged pending_review], to: :pending_review
    end

    event :mark_as_published do
      # fixme: we dont currently go into 'mark as pending review' when the user is
      # creating their own records, we allow them to go from fraft -> published
      transitions from: %i[draft pending_review published flagged], to: :published
    end

    event :mark_as_flagged do
      transitions from: %i[pending_review published flagged], to: :flagged
    end

    event :mark_as_deleted do
      transitions from: %i[draft published pending_review flagged], to: :deleted
    end
  end

  def everyone_collections
    collections.where(write_state: 'everyone')
  end

  def user_collections
    collections.where(write_state: ['creator', 'team'])
  end

  def get_primary_image(fallback_to_first: true)
    if primary_image_id && primary_image
      primary_image
    end

    images = attachments.where(attachable_type: "Attachments::Image")
    image = images.select{|a| a.attachable.attachment.is_primary?}.first

    if !image && fallback_to_first
      images.first if fallback_to_first && !image
    else
      image
    end
  end

  def excerpt(max_length = 80)
    if description.present?
      ActionController::Base.helpers.strip_tags(description).truncate(max_length).html_safe
    else
      ""
    end
  end

  def user_name
    user.name
  end
end
